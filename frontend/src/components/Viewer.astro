---
import Inputs from "@components/partials/viewer/Inputs.astro";
import Table from "@components/partials/viewer/Table.astro";
import JS from "@components/JS.astro";
const baseURL = import.meta.env.PUBLIC_BASE_URL;
---

<div class="mx-auto" id="data" data-base-url={baseURL}>
  <Inputs />
  <Table />
</div>

<script is:inline src="//unpkg.com/alpinejs@3.0.7/dist/cdn.js"></script>
<JS />

<script is:inline>
  let currentURL = new URL(window.location.href);
  currentURL = currentURL.origin + currentURL.pathname;
  let baseURL =
    document.querySelector("[data-base-url]")?.getAttribute("data-base-url") ||
    currentURL;
  baseURL = baseURL.startsWith("http") ? baseURL : currentURL + baseURL;
  // remove trailing slash
  baseURL = baseURL.replace(/\/$/, "");
  let input = Alpine.reactive({
    query: "",
    query_file: "",
    ignore: "",
    file_path: "",
    realtime: false,
    reverse: true,
    host: "",
    type: "",
    page: 1,
    per_page: 100,
    drop_down_search_file: true,
  });
  let highlighter = Alpine.reactive({
    line_from: 0,
    line_upto: 0,
  });
  let results = Alpine.reactive({
    result: {
      lines: [],
      match_pattern: "",
      total: 0,
      file_path: "",
    },
    file_paths: [],
    file_paths_backup: [],
  });
  let loading = Alpine.reactive({
    fetching: false,
    error: "",
    errorJSON: "",
    updated_at: "",
  });
  let intervalId = null;

  const init = async () => {
    input.host = input.host ?? ""; // could be undefined
    input.type = input.type ?? ""; // could be undefined
    loading.error = "";
    loading.errorJSON = "";
    loading.fetching = true;

    const url = `${baseURL}/api?query=${input.query}&ignore=${input.ignore}&page=${input.page}&per_page=${input.per_page}&file_path=${input.file_path}&host=${input.host}&type=${input.type}&reverse=${input.reverse}`;

    const response = await fetch(url).catch((error) => {
      loading.fetching = false;
      loading.error = error;
      return;
    });
    loading.updated_at = new Date().toLocaleTimeString();

    loading.fetching = false;
    if (response.status !== 200) {
      loading.error = response.statusText;
      ej = await response.json();
      try {
        loading.errorJSON = JSON.stringify(ej, null, 2);
      } catch (e) {
        loading.errorJSON = ej;
      }
      return;
    }

    let res = await response.json();
    if (input.reverse && res.result.lines) {
      res.result.lines = res.result.lines.reverse();
      highlighter.line_from = highlighter.line_upto;
      highlighter.line_upto =
        res.result.lines.length > 0 ? res.result.lines[0].line_number : 0;
    }
    setTimeout(() => {
      results.file_paths = res.file_paths;
      results.file_paths_backup = res.file_paths;
      results.result = res.result;
      input.file_path = res.result.file_path;
      input.host = res.result.host;
      input.type = res.result.type;
    }, 100);

    manageRealtimeUpdates();
  };
  init();

  const submit = async () => {
    init();
  };
  const submitFile = async () => {
    if (input.query_file === "") {
      results.file_paths = results.file_paths_backup;
      return;
    }
    if (input.query_file.length < 3) {
      return;
    }

    const minMatchLength = 3; // Minimum length of matching substring
    const matching_file_paths = results.file_paths_backup.filter((curr) => {
      if (curr.type === "file") {
        return hasMatch(input.query_file, curr.type, minMatchLength)
            || hasMatch(input.query_file, curr.file_path, minMatchLength);
      }
      if (curr.type === "docker") {
        return hasMatch(input.query_file, curr.type, minMatchLength)
        || hasMatch(input.query_file, curr.host, minMatchLength)
        || hasMatch(input.query_file, curr.name, minMatchLength)
        || (!curr.file_path.startsWith('/tmp/GOL-') && hasMatch(input.query_file, curr.file_path, minMatchLength));
      }
      if (curr.type === "ssh") {
        return hasMatch(input.query_file, curr.host, minMatchLength)
        || hasMatch(input.query_file, curr.file_path, minMatchLength)
        || hasMatch(input.query_file, curr.type, minMatchLength);
      }
      if (curr.type === "stdin") {
        return hasMatch(input.query_file, curr.type, minMatchLength);
      }
    });

    results.file_paths = matching_file_paths;
  };

  const manageRealtimeUpdates = () => {
    if (intervalId) {
      clearInterval(intervalId);
    }
    if (input.realtime) {
      intervalId = setInterval(init, 5 * 1000); // 5 seconds
    }
  };

  const data = {
    submit,
    submitFile,
    formatBytes,
    numberToK,
    timeago,
  };
  document.getElementById("data").setAttribute("x-data", JSON.stringify(data));
  Alpine.start();
</script>

<style></style>
