---

---

<script is:inline>
  function formatBytes(bytes, decimals = 2) {
    if (bytes === 0) return "0 Bytes";
    const k = 1024;
    const dm = decimals < 0 ? 0 : decimals;
    const sizes = ["Bytes", "KB", "MB", "GB", "TB"];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + " " + sizes[i];
  }
  function numberToK(number) {
    return number > 999 ? (number / 1000).toFixed(1) + "k" : number;
  }
  function timeago(str) {
    if (!str) return "";
    date = new Date(str);
    if (isNaN(date)) return "";
    const now = new Date();
    const secondsPast = (now.getTime() - date.getTime()) / 1000;

    if (secondsPast < 0) {
      return "";
    }
    if (secondsPast < 60) {
      return `${Math.floor(secondsPast)}s ago`;
    }
    if (secondsPast < 3600) {
      const minutes = Math.floor(secondsPast / 60);
      return `${minutes}${minutes === 1 ? "min" : "mins"} ago`;
    }
    if (secondsPast <= 86400) {
      const hours = Math.floor(secondsPast / 3600);
      return `${hours}${hours === 1 ? "h" : "h"} ago`;
    }
    if (secondsPast <= 2592000) {
      const days = Math.floor(secondsPast / 86400);
      return `${days}${days === 1 ? "d" : "d"} ago`;
    }
    if (secondsPast <= 31536000) {
      const months = Math.floor(secondsPast / 2592000);
      return `${months}${months === 1 ? "mth" : "mth"} ago`;
    }
    const years = Math.floor(secondsPast / 31536000);
    return `${years}${years === 1 ? "yr" : "yrs"} ago`;
  }
  const hasMatch = (a, b, length) => {
    for (let i = 0; i <= a.length - length; i++) {
      const substring = a.substring(i, i + length);
      if (b.includes(substring)) {
        return true;
      }
    }
    return false;
  };
</script>
